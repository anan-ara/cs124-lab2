
// rules_version = '2';
// service cloud.firestore {
//   match /databases/{database}/documents {
//     match /{document=**} {
//       allow read, write: if true;
//     }
//   }
// }


rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() {
      return request.auth.uid != null;
    }

    function isVerified() {
      return request.auth.token.email_verified == true;
    }
    // Helper functions

    function isSameUser() {
      return request.auth.uid == resource.data.uid;
    }

    function isListViewer() {
      return request.auth.token.email in resource.data.viewers;
    }

    function isListEditor() {
      return request.auth.token.email in resource.data.editors;
    }

    function isListAdmin() {
      return request.auth.token.email in resource.data.admins;
    }

    function isListOwner() {
      return request.auth.token.email == resource.data.owner;
    }

    // function listHasOriginalOwner() {
    //   return resource.data.owner == request.resource.data.owner;
    //   // the document's owner can't be changed 
    // }

    function listHasOriginalConstants() {
      return resource.data.owner == request.resource.data.owner
      && resource.data.id == request.resource.data.id
      && resource.data.created == request.resource.data.created;
      // the document's original constants (id, owner, creation date) should never be changed
    }

    function listHasCorrectOwner() {
      return request.auth.token.email == request.resource.data.owner;
      // can only make list if I'm saying I'm the author of the new list
    }

    function listHasSameSharing() {
      return resource.data.viewers == request.resource.data.viewers 
        && resource.data.editors == request.resource.data.editors
        && resource.data.admins == request.resource.data.admins;
      // Don't change the sharing permissions.
    }

    match /users/{person} {
      allow read, write: if signedIn() && isVerified() && isSameUser();
      // allow read, write: if true;

    }

    match /lists/{list} {
      allow read: if signedIn() && isVerified() && (isListViewer() || isListEditor() || isListAdmin() || isListOwner());
      // allow read, write: if true;

      allow create: if signedIn() && isVerified() && listHasCorrectOwner();
      allow update: if signedIn() && isVerified() && listHasOriginalConstants() && ((isListEditor() && listHasSameSharing()) || isListAdmin() || isListOwner());
      allow delete: if signedIn() && isVerified() && isListOwner();
    }

  }
}
